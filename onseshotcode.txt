#!/bin/bash

# --- 1. DEFINE NEW PROJECT DIRECTORY AND PORT ---
PROJECT_DIR="/srv/docker/my-music-app-v7.2.0"
HOST_PORT="4030" # Using a new port for the new version
PERMANENT_DATA_DIR="/srv/docker/my-music-app-data" # The permanent data location

echo "Setting up new version v7.2.0 in: $PROJECT_DIR on port $HOST_PORT"
echo "This version will use persistent data from: $PERMANENT_DATA_DIR"

# --- 2. STOP AND REMOVE ANY OLD CONTAINERS ---
echo "Stopping and removing any old music app containers to prevent port conflicts..."
docker stop $(docker ps -a -q --filter "name=my-music-streamer") > /dev/null 2>&1
docker rm $(docker ps -a -q --filter "name=my-music-streamer") > /dev/null 2>&1
echo "Cleanup complete."

# --- 3. SETUP PROJECT DIRECTORY AND STRUCTURE ---
echo "Creating project directory at $PROJECT_DIR..."
# We only need the app structure; data directories are mounted externally.
mkdir -p "$PROJECT_DIR/app/public"

# --- 4. CREATE THE DOCKER COMPOSE FILE ---
# This version points to your permanent data directory.
cat <<EOF > "$PROJECT_DIR/docker-compose.yml"
version: '3.8'
services:
  my-music-app-v7-2-0:
    build: ./app
    container_name: my-music-streamer-v7.2.0
    ports:
      - "${HOST_PORT}:3000"
    volumes:
      - "${PERMANENT_DATA_DIR}/music:/app/music"
      - "${PERMANENT_DATA_DIR}/playlists.json:/app/playlists.json"
      - "${PERMANENT_DATA_DIR}/covers:/app/public/covers"
    restart: unless-stopped
EOF

# --- 5. CREATE THE BACKEND DOCKERFILE ---
cat <<'EOF' > "$PROJECT_DIR/app/Dockerfile"
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD [ "npm", "start" ]
EOF

# --- 6. CREATE THE BACKEND PACKAGE.JSON with new version ---
cat <<'EOF' > "$PROJECT_DIR/app/package.json"
{
  "name": "my-music-app-v7.2.0",
  "version": "7.2.0",
  "description": "Music streaming app with universal search functionality.",
  "main": "server.js",
  "scripts": { "start": "node server.js" },
  "dependencies": { "express": "^4.18.2", "multer": "^1.4.5-lts.1", "music-metadata": "^7.13.0" }
}
EOF

# --- 7. CREATE THE BACKEND SERVER.JS (No changes needed for client-side search) ---
cat <<'EOF' > "$PROJECT_DIR/app/server.js"
const express=require("express"),fs=require("fs").promises,path=require("path"),multer=require("multer"),mm=require("music-metadata"),app=express(),PORT=3e3;app.use(express.json());const musicDirectory=path.join(__dirname,"music"),playlistsFilePath=path.join(__dirname,"playlists.json"),coversDirectory=path.join(__dirname,"public/covers");let libraryCache=[];async function scanLibrary(){console.log("Starting library scan...");try{await fs.mkdir(coversDirectory,{recursive:!0});const files=await fs.readdir(musicDirectory);const audioFiles=files.filter(file=>file.match(/\.(mp3|wav|ogg|flac)$/i));let processedSongs=await Promise.all(audioFiles.map(async file=>{try{const filePath=path.join(musicDirectory,file);const stats=await fs.stat(filePath);const metadata=await mm.parseFile(filePath);const{title,artist,album}=metadata.common;let coverArtUrl="/covers/default.svg";if(metadata.common.picture?.length>0){const picture=metadata.common.picture[0];const coverPath=path.join(coversDirectory,`${path.parse(file).name}.jpg`);await fs.writeFile(coverPath,picture.data);coverArtUrl=`/covers/${path.parse(file).name}.jpg`}return{filename:file,title:title||path.parse(file).name.replace(/_/g," "),artist:artist||"Unknown Artist",album:album||"Unknown Album",coverArtUrl:coverArtUrl,duration:metadata.format.duration||0,dateAdded:stats.mtime}}catch(error){console.error(`Could not process metadata for ${file}:`,error.message);return null}}));libraryCache=processedSongs.filter(song=>song!==null);const playlists=await readPlaylists();for(const song of libraryCache)song.liked=playlists["Liked Songs"]?.includes(song.filename)??!1;console.log(`Library scan complete. Found ${libraryCache.length} tracks.`)}catch(error){console.error("Error scanning library:",error)}}const readPlaylists=async()=>{try{const data=await fs.readFile(playlistsFilePath);return JSON.parse(data)}catch(error){return{"Liked Songs":[]}}};const writePlaylists=async playlists=>{await fs.writeFile(playlistsFilePath,JSON.stringify(playlists,null,2))};app.use(express.static("public"));app.get("/api/library",(req,res)=>res.json(libraryCache));app.post("/api/rescan",async(req,res)=>{await scanLibrary();res.status(200).json({message:"Library re-scan complete."})});const upload=multer({dest:musicDirectory}).array("musicFiles",50);app.post("/api/upload",(req,res)=>{upload(req,res,async err=>{if(err){return res.status(400).json({message:err.message})}await Promise.all(req.files.map(file=>fs.rename(file.path,path.join(musicDirectory,file.originalname))));await scanLibrary();res.status(200).json({message:`${req.files.length} file(s) uploaded successfully.`})})});app.get("/api/playlists",async(req,res)=>res.json(await readPlaylists()));app.post("/api/playlists",async(req,res)=>{const{name}=req.body;const playlists=await readPlaylists();if(name&&name!=="Liked Songs"&&!playlists[name]){playlists[name]=[];await writePlaylists(playlists);res.status(201).json({message:`Playlist '${name}' created.`})}else{res.status(400).json({message:"Invalid or duplicate playlist name."})}});app.post("/api/playlists/:name/add-multiple",async(req,res)=>{const{name}=req.params;const{songFilenames}=req.body;const playlists=await readPlaylists();if(!playlists[name]||!Array.isArray(songFilenames)){return res.status(400).json({message:"Invalid request."})}let newSongsAdded=0;songFilenames.forEach(filename=>{if(!playlists[name].includes(filename)){playlists[name].push(filename);newSongsAdded++}});if(newSongsAdded>0){await writePlaylists(playlists)}res.status(200).json({message:`${newSongsAdded} new song(s) added to '${name}'.`})});app.delete("/api/playlists/:name/remove",async(req,res)=>{const{name}=req.params;const{songFilename}=req.body;const playlists=await readPlaylists();if(!playlists[name]||!songFilename){return res.status(400).json({message:"Invalid request."})}const index=playlists[name].indexOf(songFilename);if(index>-1){playlists[name].splice(index,1);await writePlaylists(playlists)}res.status(200).json({message:`Song removed from '${name}'.`})});app.delete("/api/library/delete",async(req,res)=>{const{filenames}=req.body;if(!Array.isArray(filenames)){return res.status(400).json({message:"Invalid request."})}try{const playlists=await readPlaylists();for(const playlistName of Object.keys(playlists)){playlists[playlistName]=playlists[playlistName].filter(song=>!filenames.includes(song))}await writePlaylists(playlists);await Promise.all(filenames.map(async file=>{const musicPath=path.join(musicDirectory,file);const coverPath=path.join(coversDirectory,`${path.parse(file).name}.jpg`);await fs.unlink(musicPath);await fs.unlink(coverPath).catch(()=>{console.log(`No cover art for ${file} to delete.`)})}));await scanLibrary();res.status(200).json({message:`${filenames.length} song(s) deleted.`})}catch(error){console.error("Error deleting files:",error);res.status(500).json({message:"Error deleting files."})}});app.post("/api/like-song",async(req,res)=>{const{songFilename}=req.body;const playlists=await readPlaylists();playlists["Liked Songs"]||(playlists["Liked Songs"]=[]);const index=playlists["Liked Songs"].indexOf(songFilename);if(index>-1){playlists["Liked Songs"].splice(index,1)}else{playlists["Liked Songs"].push(songFilename)}await writePlaylists(playlists);const librarySong=libraryCache.find(s=>s.filename===songFilename);if(librarySong)librarySong.liked=index===-1;res.status(200).json({liked:index===-1})});app.get("/music/:fileName",(req,res)=>{const filePath=path.join(musicDirectory,req.params.fileName);res.sendFile(filePath,err=>{if(err){res.status(404).send("File not found.")}})});app.listen(PORT,()=>{scanLibrary();console.log(`Music app v7.2.0 running on http://localhost:${PORT}`)});
EOF

# --- 8. CREATE THE FRONTEND HTML (index.html) with Search Bar ---
cat <<'EOF' > "$PROJECT_DIR/app/public/index.html"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>My Music Cloud</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="app-container">
        <div class="mobile-header">
            <button id="hamburger-btn" class="hamburger-btn">â˜°</button>
            <div id="mobile-view-switcher" class="view-switcher"></div>
        </div>
        <div class="app-layout">
            <nav id="sidebar" class="sidebar">
                <h2>My Music</h2>
                <ul class="nav-links">
                    <li id="nav-library" class="active">Library</li>
                    <li id="nav-upload">Upload</li>
                </ul>
                <div class="playlists-section">
                    <h3>Playlists</h3>
                    <ul id="playlist-list"></ul>
                    <div class="create-playlist-wrapper">
                        <input type="text" id="new-playlist-name" placeholder="New Playlist...">
                        <button id="create-playlist-btn">+</button>
                    </div>
                </div>
            </nav>
            <main class="main-content">
                <div class="main-header">
                    <h1 id="view-title">Library</h1>
                    <div id="desktop-view-switcher" class="view-switcher"></div>
                </div>
                <!-- Search Bar Container -->
                <div class="search-bar-container">
                    <input type="search" id="search-input" placeholder="Search your library...">
                </div>
                <div id="library-view" class="view active">
                    <div id="song-grid" class="song-grid"></div>
                    <div id="song-list" class="song-list"></div>
                </div>
                <div id="upload-view" class="view">
                     <div class="upload-container">
                        <h3>Upload Music</h3>
                        <form id="upload-form">
                            <label for="file-input" class="file-drop-area"><span class="file-msg">Drag & Drop or click</span></label>
                            <input id="file-input" class="file-input" type="file" name="musicFiles" accept="audio/*" multiple>
                            <div id="upload-preview-wrapper"><h4>Queue</h4><ul id="upload-preview"></ul></div>
                            <button type="submit">Upload Files</button>
                            <p id="upload-status"></p>
                        </form>
                    </div>
                </div>
            </main>
            <footer id="now-playing-bar" class="now-playing-bar">
                <div class="track-info clickable">
                    <img id="current-track-cover" src="/covers/default.svg" alt="cover">
                    <div class="track-details">
                        <span id="current-track-title">No song playing</span>
                        <span id="current-track-artist"></span>
                    </div>
                </div>
                <div id="desktop-player-controls" class="player-controls"></div>
                <div class="player-actions">
                    <button id="like-btn-player" class="like-btn"></button>
                    <button id="mobile-play-pause-btn" class="main-control play-btn"></button>
                </div>
            </footer>
        </div>
    </div>
    <div id="sidebar-overlay" class="sidebar-overlay"></div>
    <div id="full-screen-player" class="full-screen-player">
        <div class="fs-content">
            <img id="fs-cover-art" src="/covers/default.svg">
            <div class="fs-track-details">
                <h2 id="fs-title"></h2>
                <p id="fs-artist"></p>
            </div>
            <div id="fs-player-controls" class="player-controls"></div>
        </div>
    </div>
    <div id="context-menu"></div>
    <div id="toast-container"></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/color-thief/2.3.0/color-thief.umd.js"></script>
    <script src="app.js"></script>
</body>
</html>
EOF

# --- 9. CREATE THE FRONTEND CSS (styles.css) with Search Bar Styles ---
cat <<'EOF' > "$PROJECT_DIR/app/public/styles.css"
:root{--bg-main:#121212;--bg-secondary:#000;--bg-tertiary:#181818;--bg-highlight:#2a2a2a;--accent:#1DB954;--text-primary:#fff;--text-secondary:#b3b3b3;--font-family:'Segoe UI','Roboto',sans-serif;--danger:#e74c3c;--dynamic-bg-color:transparent;--fs-dynamic-bg:var(--bg-tertiary)}
html,body{margin:0;padding:0;font-family:var(--font-family);background-color:var(--bg-main);color:var(--text-primary);overflow-x:hidden;height:100vh}
#app-container{height:100vh;display:flex;flex-direction:column}
.app-layout{display:grid;grid-template-areas:"sidebar main" "now-playing now-playing";grid-template-columns:250px 1fr;grid-template-rows:1fr auto;height:100%;transition:filter .3s ease;overflow:hidden}
#app-container.fs-active .app-layout{filter:blur(10px) brightness(0.5)}
.sidebar{grid-area:sidebar;background-color:var(--bg-secondary);padding:20px;display:flex;flex-direction:column;gap:20px;z-index:1002}
.main-content{grid-area:main;background-color:var(--bg-main);overflow-y:auto;padding:30px}
.main-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px;}
#view-title { flex-grow: 1; }
/* --- NEW SEARCH BAR STYLES --- */
.search-bar-container{margin-bottom:25px;position:relative}
#search-input{width:100%;max-width:400px;padding:12px 12px 12px 40px;border-radius:25px;border:none;background-color:var(--bg-highlight);color:var(--text-primary);font-size:1rem;transition:background-color .2s}
#search-input:focus{outline:none;background-color:#333}
#search-input::placeholder{color:var(--text-secondary)}
.search-bar-container::before{content:'';position:absolute;left:15px;top:50%;transform:translateY(-50%);width:20px;height:20px;background-image:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23b3b3b3"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/></svg>');background-repeat:no-repeat;opacity:0.7}
/* --- END SEARCH BAR STYLES --- */
.view-switcher{display:flex;gap:8px;}
.view-btn{background:none;border:none;cursor:pointer;opacity:0.6;}
.view-btn.active{opacity:1;}
.view-btn svg{width:24px;height:24px;fill:var(--text-primary);}
.now-playing-bar{grid-area:now-playing;background:linear-gradient(90deg, var(--dynamic-bg-color), var(--bg-tertiary) 70%);border-top:1px solid var(--bg-highlight);display:flex;align-items:center;justify-content:space-between;padding:16px 24px;gap:20px;transition:background .5s ease-in-out;z-index:100}
.now-playing-bar .track-info{flex:1;min-width:0;}
.now-playing-bar .player-controls{flex:2;display:flex;justify-content:center;}
.now-playing-bar .player-actions{flex:1;display:flex;justify-content:flex-end;gap:10px}
.sidebar h2,.sidebar h3{margin:0}
.nav-links,#playlist-list{list-style:none;padding:0;margin:0}
.nav-links li,#playlist-list li{padding:10px;border-radius:5px;cursor:pointer;font-weight:600;opacity:0.7;transition:all .2s;user-select:none}
.nav-links li:hover,#playlist-list li:hover{opacity:1;background-color:var(--bg-highlight)}
#playlist-list li.drop-target{background-color:var(--accent);color:#000;transform:scale(1.05)}
.nav-links li.active,#playlist-list li.active{opacity:1;color:var(--accent)}
.playlists-section{display:flex;flex-direction:column;gap:10px;overflow-y:auto;flex:1 1 auto;min-height:0;}
.playlists-section::-webkit-scrollbar{width:12px}
.playlists-section::-webkit-scrollbar-thumb{background-color:var(--bg-highlight);border:4px solid var(--bg-secondary);border-radius:10px}
.playlists-section::-webkit-scrollbar-track{background:transparent}
.create-playlist-wrapper{display:flex;margin-top:auto;padding-top:10px}
#new-playlist-name{flex-grow:1;background:var(--bg-highlight);border:1px solid #444;color:var(--text-primary);padding:8px;border-radius:5px 0 0 5px;border-right:none;width:0; min-width:0;}
#create-playlist-btn{background:var(--accent);border:none;color:#000;font-weight:700;padding:0 12px;border-radius:0 5px 5px 0;cursor:pointer}
.view{display:none}.view.active{display:block}
.song-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(180px,1fr));gap:20px}
.song-card{background:var(--bg-tertiary);border-radius:8px;padding:15px;cursor:pointer;transition:.2s;position:relative;overflow:hidden;user-select:none}
.song-card.selected{outline:2px solid var(--accent);background:var(--bg-highlight)}
.song-card.playing{background:var(--accent)!important;color:#000}
.song-card.playing .song-artist{color:#333}
.cover-art-wrapper,.song-title,.song-artist{pointer-events:none}
.cover-art-wrapper{width:100%;aspect-ratio:1/1;border-radius:5px;overflow:hidden;margin-bottom:10px}
.cover-art-wrapper img{width:100%;height:100%;object-fit:cover}
.song-title{font-weight:600;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
.song-artist{font-size:.9em;color:var(--text-secondary);white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
.song-list{display:none;}
.song-list-header{display:grid;grid-template-columns:40px 4fr 3fr 2fr 100px;gap:15px;padding:0 15px;margin-bottom:10px;color:var(--text-secondary);font-size:0.9rem;border-bottom:1px solid var(--bg-highlight);padding-bottom:10px;}
.header-item:first-child{text-align:right;}
.song-row{display:grid;grid-template-columns:40px 4fr 3fr 2fr 100px;gap:15px;padding:10px 15px;border-radius:5px;cursor:pointer;align-items:center;transition:background-color 0.2s;}
.song-row:hover{background-color:var(--bg-highlight);}
.song-row.playing{background-color:var(--accent);color:#000;}
.song-row.playing .song-row-artist, .song-row.playing .song-row-album, .song-row.playing .song-row-date, .song-row.playing .song-row-duration {color:#333;}
.song-row-index{color:var(--text-secondary);text-align:right;}
.song-row-title-artist{display:flex;align-items:center;gap:15px;}
.song-row-cover{width:40px;height:40px;border-radius:4px;object-fit:cover;}
.song-row-details{display:flex;flex-direction:column;}
.song-row-title{font-weight:600;}
.song-row-artist{font-size:0.9rem;color:var(--text-secondary);}
.song-row-album, .song-row-date, .song-row-duration{color:var(--text-secondary);font-size:0.9rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;}
.upload-container{max-width:600px;margin:auto;text-align:center}
.upload-container h3 { margin-bottom: 20px; }
.file-drop-area{display:flex;align-items:center;justify-content:center;padding:40px;border:2px dashed var(--text-secondary);border-radius:5px;transition:.3s;cursor:pointer}
.file-drop-area.is-active{border-color:var(--accent);background:rgba(29,185,84,0.1)}
.file-input{display:none}
#upload-preview-wrapper{margin-top:15px;display:none}
#upload-preview{max-height:200px;overflow-y:auto;background:var(--bg-secondary);border-radius:5px;padding:5px;list-style:none}
#upload-preview li{padding:5px 10px;font-size:.9em}
#upload-form button{width:100%;padding:12px;margin-top:15px;background:var(--accent);color:#000;font-weight:700;border:none;border-radius:5px;cursor:pointer}
.track-info{display:flex;align-items:center;gap:15px;min-width:0; cursor: pointer;}
#mobile-play-pause-btn{display:none;}
#current-track-cover{width:60px;height:60px;object-fit:cover;border-radius:4px}
.track-details{display:flex;flex-direction:column;min-width:0; justify-content:center;}
.like-btn{background:none;border:none;cursor:pointer;padding:5px;transition:.2s}
.like-btn svg { opacity: 0.7; transition: all 0.2s; }
.like-btn:hover svg { opacity: 1; }
.like-btn.liked svg { fill: var(--accent) !important; opacity: 1; }
#like-btn-player svg{width:20px;height:20px}
#audio-player{display:none}
.custom-player-ui{display:flex;flex-direction:column;align-items:center;width:100%;max-width:700px;gap:8px}
.player-buttons{display:flex;align-items:center;gap:16px}
.control-btn{background:none;border:none;cursor:pointer;padding:0;position:relative}
.control-btn svg{display:block;width:20px;height:20px; opacity: 0.7; transition: all .2s;}
.control-btn:hover svg{opacity: 1;}
.control-btn.active svg{fill:var(--accent) !important; opacity: 1;}
.main-control{width:40px;height:40px;border-radius:50%;border:none;background-color:var(--text-primary);cursor:pointer;display:flex;justify-content:center;align-items:center;transition:.2s}
.main-control:hover{transform:scale(1.1)}
.main-control.play-btn::after{content:'';display:block;width:0;height:0;border-top:8px solid transparent;border-bottom:8px solid transparent;border-left:14px solid #000;margin-left:4px}
.main-control.pause-btn::after{content:'';display:block;width:12px;height:14px;border-left:4px solid #000;border-right:4px solid #000;box-sizing:border-box}
.progress-section{display:flex;align-items:center;width:100%;gap:10px;font-size:.9em;color:var(--text-secondary)}
.progress-container{flex-grow:1;height:6px;background:var(--bg-highlight);border-radius:5px;cursor:pointer}
.progress-bar-fill{height:100%;width:0%;border-radius:5px;background:linear-gradient(90deg, var(--accent), #24c298);transition:width .1s linear}
.full-screen-player{position:fixed;inset:0;z-index:1001;display:flex;flex-direction:column;justify-content:center;align-items:center;gap:20px;opacity:0;visibility:hidden;background-color:var(--fs-dynamic-bg); padding: 20px env(safe-area-inset-right) 20px env(safe-area-inset-left); box-sizing: border-box; transition: opacity .3s ease, visibility .3s ease, transform .3s ease;}
.full-screen-player::before{content:'';position:absolute;inset:0;background:radial-gradient(circle, transparent 0%, rgba(0,0,0,0.8) 80%);backdrop-filter:blur(50px)}
.full-screen-player.visible{opacity:1;visibility:visible}
.fs-content{position:relative;z-index:2; text-align:center; display: flex; flex-direction: column; align-items: center; justify-content: center; width: 100%; max-width: 500px;}
#fs-cover-art{width:100%;max-width:40vh;aspect-ratio:1/1;border-radius:10px;box-shadow:0 10px 30px rgba(0,0,0,0.5)}
.fs-track-details {width: 100%; padding: 20px 0;}
#fs-title{font-size:1.8rem;margin:0 0 5px 0}
#fs-artist{font-size:1.1rem;color:var(--text-secondary);margin:0}
#fs-player-controls { margin-top: 20px; width: 100%;}
#fs-player-controls .control-btn svg{fill: var(--text-primary) !important;}
#fs-player-controls .main-control { width: 60px; height: 60px; }
#fs-player-controls .control-btn svg { width: 24px; height: 24px; }
#fs-player-controls .player-buttons { gap: 25px; justify-content: center;}
#fs-player-controls .progress-section { margin-top: 20px; padding: 0 10px; box-sizing: border-box; }
#context-menu{position:fixed;z-index:10000;width:220px;background:var(--bg-highlight);border-radius:5px;box-shadow:0 5px 15px rgba(0,0,0,0.5);padding:5px;display:none}
.mobile-header{display:none}
.sidebar-overlay{display:none}
.drag-image{position:absolute;left:-1000px;top:-1000px;display:flex;align-items:center;background:var(--bg-highlight);border-radius:8px;padding:8px;box-shadow:0 5px 15px rgba(0,0,0,0.3);font-size:1rem;font-weight:600;z-index:11000;pointer-events:none;}
.drag-image img{width:50px;height:50px;border-radius:4px;margin-right:12px;}
.drag-image .drag-info{display:flex;flex-direction:column;align-items:flex-start;}
.drag-image .drag-info .drag-title{white-space:nowrap;font-size:0.9rem;}
.drag-image .drag-info .drag-count{font-size:0.8rem;color:var(--text-secondary);}
@media (max-width: 768px) {
    .main-header { display: none; }
    .mobile-header{display:flex; align-items:center; justify-content:space-between; background:var(--bg-secondary);padding:10px 15px;padding-top:calc(10px + env(safe-area-inset-top));gap:15px;position:sticky;top:0;z-index:1003; transition: background-color .3s ease;}
    #app-container.fs-active .mobile-header {background: transparent;}
    .hamburger-btn{background:none;border:none;color:var(--text-primary);font-size:1.5rem;cursor:pointer}
    .app-layout{display:flex;flex-direction:column;height:100%;}
    .main-content{flex:1;min-height:0;}
    .now-playing-bar{display:grid;grid-template-columns:1fr auto;padding:10px 15px;flex-shrink:0;}
    .now-playing-bar .player-controls {display: none;}
    .sidebar{position:fixed;top:0;left:0;height:100%;transform:translateX(-100%);transition:transform .3s ease-in-out; z-index: 1004; padding-top: calc(20px + env(safe-area-inset-top));}
    .sidebar.visible{transform:translateX(0)}
    .sidebar-overlay{position:fixed;inset:0;background:rgba(0,0,0,0.5);z-index:1003;display:none}
    .sidebar-overlay.visible{display:block}
    .main-content{padding:15px}
    #search-input { max-width: 100%; }
    .song-grid{grid-template-columns:repeat(auto-fill,minmax(140px,1fr));gap:15px}
    .song-list-header{grid-template-columns:4fr 3fr; padding: 0 10px;}
    .song-list-header .header-item:first-child, .song-list-header .header-item:nth-child(4), .song-list-header .header-item:nth-child(5) {display:none;}
    .song-row{grid-template-columns:4fr 3fr; padding: 10px;}
    .song-row-index, .song-row-date, .song-row-duration {display:none;}
    .player-actions { gap: 10px; }
    #mobile-play-pause-btn { display: flex; }
    .track-details span{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
    #current-track-title{max-width:calc(100vw - 180px)}
    .track-info{gap:10px}
    #toast-container{bottom:80px}
}
EOF

# --- 10. CREATE THE FRONTEND JAVASCRIPT (app.js) with Search Logic ---
cat <<'EOF' > "$PROJECT_DIR/app/public/app.js"
document.addEventListener('DOMContentLoaded', () => {
    const $ = (selector) => document.querySelector(selector);
    const $$ = (selector) => document.querySelectorAll(selector);
    const appContainer = $('#app-container');
    const audioPlayer = document.createElement('audio');
    audioPlayer.id = 'audio-player';
    document.body.appendChild(audioPlayer);
    // New Search Element
    const searchInput = $('#search-input');
    const nowPlayingBar = $('#now-playing-bar');
    const sidebar = $('#sidebar');
    const sidebarOverlay = $('#sidebar-overlay');
    const hamburgerBtn = $('#hamburger-btn');
    const mobileViewTitle = $('#mobile-view-title');
    const viewTitle = $('#view-title');
    const songGrid = $('#song-grid');
    const songList = $('#song-list');
    const desktopViewSwitcher = $('#desktop-view-switcher');
    const mobileViewSwitcher = $('#mobile-view-switcher');
    const playlistList = $('#playlist-list');
    const createPlaylistBtn = $('#create-playlist-btn');
    const newPlaylistInput = $('#new-playlist-name');
    const currentTrack = { title: $('#current-track-title'), artist: $('#current-track-artist'), cover: $('#current-track-cover'), clickable: $('.track-info.clickable') };
    const uploadForm = $('#upload-form');
    const contextMenu = $('#context-menu');
    const likeBtnPlayer = $('#like-btn-player');
    const playerControlsHTML = `<div class="custom-player-ui"><div class="player-buttons"><button id="shuffle-btn" class="control-btn"></button><button id="prev-btn" class="control-btn"></button><button id="play-pause-btn" class="play-btn main-control"></button><button id="next-btn" class="control-btn"></button><button id="repeat-btn" class="control-btn"></button></div><div class="progress-section"><span class="current-time">0:00</span><div class="progress-container"><div class="progress-bar-fill"></div></div><span class="total-time">0:00</span></div></div>`;
    $('#desktop-player-controls').innerHTML = playerControlsHTML;
    $('#fs-player-controls').innerHTML = playerControlsHTML.replace('progress-section', 'progress-section fs-progress');
    const player = { playPauseBtns: $$('#play-pause-btn, #mobile-play-pause-btn'), nextBtns: $$('#next-btn'), prevBtns: $$('#prev-btn'), shuffleBtns: $$('#shuffle-btn'), repeatBtns: $$('#repeat-btn'), progressContainers: $$('.progress-container'), progressBarFills: $$('.progress-bar-fill'), currentTimes: $$('.current-time'), totalTimes: $$('.total-time') };
    const fsPlayer = { container: $('#full-screen-player'), cover: $('#fs-cover-art'), title: $('#fs-title'), artist: $('#fs-artist') };
    let library = [], playlists = {}, currentView = { type: 'library', name: 'Library' }, playbackState = { queue: [], currentIndex: -1, isShuffle: false, repeatMode: 'none' }, currentLayout = localStorage.getItem('music-app-layout') || 'grid';
    const colorThief = new ColorThief();
    const api = { get: (url) => fetch(url).then(res => res.json()), post: (url, body) => fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) }).then(res => res.json()), delete: (url, body) => fetch(url, { method: 'DELETE', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) }).then(res => res.json()) };
    const fetchData = async () => { [library, playlists] = await Promise.all([api.get('/api/library'), api.get('/api/playlists')]); };
    const render = () => { renderPlaylists(); renderMainView(); updateActiveNav(); };
    const renderMainView = () => {
        songGrid.innerHTML = ''; songList.innerHTML = ''; viewTitle.textContent = currentView.name;
        let songsToRender = currentView.type === 'library' ? [...library].sort((a, b) => new Date(b.dateAdded) - new Date(a.dateAdded)) : library.filter(s => playlists[currentView.name]?.includes(s.filename));
        
        // --- NEW: SEARCH FILTER LOGIC ---
        const searchQuery = searchInput.value.toLowerCase().trim();
        if (searchQuery) {
            songsToRender = songsToRender.filter(song =>
                song.title.toLowerCase().includes(searchQuery) ||
                song.artist.toLowerCase().includes(searchQuery) ||
                song.album.toLowerCase().includes(searchQuery)
            );
        }

        if (songsToRender.length === 0) {
            const message = searchQuery 
                ? `No results found for "${searchInput.value}"` 
                : `${currentView.name} is empty.`;
            songGrid.innerHTML = `<p>${message}</p>`;
            songList.innerHTML = `<p>${message}</p>`;
            return;
        }
        
        if (currentLayout === 'grid') {
            songGrid.style.display = 'grid'; songList.style.display = 'none';
            songsToRender.forEach(song => {
                const card = document.createElement('div'); card.className = 'song-card'; card.dataset.filename = song.filename; card.setAttribute('draggable', 'true');
                card.innerHTML = `<div class="cover-art-wrapper"><img src="${song.coverArtUrl}" alt="${song.title}" loading="lazy"></div><div class="song-title">${song.title}</div><div class="song-artist">${song.artist}</div>`;
                card.addEventListener('click', (e) => handleCardClick(e, song, songsToRender)); card.addEventListener('contextmenu', (e) => showContextMenu(e, song)); card.addEventListener('dragstart', handleDragStart);
                songGrid.appendChild(card);
            });
        } else {
            songGrid.style.display = 'none'; songList.style.display = 'block';
            songList.innerHTML = `<div class="song-list-header"><div class="header-item">#</div><div class="header-item">Title</div><div class="header-item">Album</div><div class="header-item">Date Added</div><div class="header-item">ðŸ•’</div></div>`;
            songsToRender.forEach((song, index) => {
                const row = document.createElement('div'); row.className = 'song-row'; row.dataset.filename = song.filename;
                row.innerHTML = `<div class="song-row-index">${index + 1}</div><div class="song-row-title-artist"><img src="${song.coverArtUrl}" class="song-row-cover" loading="lazy"><div class="song-row-details"><span class="song-row-title">${song.title}</span><span class="song-row-artist">${song.artist}</span></div></div><div class="song-row-album">${song.album}</div><div class="song-row-date">${new Date(song.dateAdded).toLocaleDateString()}</div><div class="song-row-duration">${formatTime(song.duration)}</div>`;
                row.addEventListener('click', (e) => handleCardClick(e, song, songsToRender)); row.addEventListener('contextmenu', (e) => showContextMenu(e, song)); row.addEventListener('dragstart', handleDragStart);
                songList.appendChild(row);
            });
        }
        updatePlayingUI();
    };
    const updatePlayingUI = () => { const currentSong = playbackState.queue[playbackState.currentIndex]; if (!currentSong) return; $$('.song-card, .song-row').forEach(el => { el.classList.toggle('playing', el.dataset.filename === currentSong.filename); }); };
    const renderPlaylists = () => { playlistList.innerHTML = ''; const sortedPlaylists = Object.keys(playlists).sort((a, b) => a === "Liked Songs" ? -1 : b === "Liked Songs" ? 1 : a.localeCompare(b)); sortedPlaylists.forEach(name => { const li = document.createElement('li'); li.textContent = name; li.dataset.playlistName = name; li.addEventListener('click', () => { searchInput.value = ''; currentView = { type: 'playlist', name }; switchView('library-view'); hideSidebar(); }); li.addEventListener('dragover', (e) => e.preventDefault()); li.addEventListener('dragenter', () => li.classList.add('drop-target')); li.addEventListener('dragleave', () => li.classList.remove('drop-target')); li.addEventListener('drop', handleDropOnPlaylist); playlistList.appendChild(li); }); };
    const updatePlayerTheme = (imageUrl) => { const defaultColor = 'transparent'; const defaultFsColor = 'var(--bg-tertiary)'; const applyColors = (barColor, fsColor) => { nowPlayingBar.style.setProperty('--dynamic-bg-color', barColor); fsPlayer.container.style.setProperty('--fs-dynamic-bg', fsColor); }; if (!imageUrl || imageUrl.endsWith('default.svg')) { applyColors(defaultColor, defaultFsColor); return; } const img = new Image(); img.crossOrigin = "Anonymous"; img.src = imageUrl; img.onload = () => { const [r, g, b] = colorThief.getColor(img); applyColors(`rgba(${r}, ${g}, ${b}, 0.3)`, `rgb(${r}, ${g}, ${b})`); }; img.onerror = () => applyColors(defaultColor, defaultFsColor); };
    const setQueueAndPlay = (songs, startSong) => { playbackState.queue = [...songs]; playbackState.currentIndex = playbackState.queue.findIndex(s => s.filename === startSong.filename); loadAndPlayCurrentSong(); };
    const loadAndPlayCurrentSong = () => { updatePlayingUI(); if (playbackState.currentIndex < 0 || playbackState.currentIndex >= playbackState.queue.length) { audioPlayer.pause(); currentTrack.title.textContent = "No song playing"; return; } const song = playbackState.queue[playbackState.currentIndex]; audioPlayer.src = `/music/${song.filename}`; audioPlayer.play(); currentTrack.title.textContent = song.title; currentTrack.artist.textContent = song.artist; currentTrack.cover.src = song.coverArtUrl; fsPlayer.cover.src = song.coverArtUrl; fsPlayer.title.textContent = song.title; fsPlayer.artist.textContent = song.artist; updatePlayerTheme(song.coverArtUrl); updateLikeButtonState(song.liked); };
    const playNext = () => { if (playbackState.queue.length === 0) return; if (playbackState.isShuffle) { playbackState.currentIndex = Math.floor(Math.random() * playbackState.queue.length); } else { playbackState.currentIndex++; if (playbackState.currentIndex >= playbackState.queue.length) { if (playbackState.repeatMode === 'all') playbackState.currentIndex = 0; else { playbackState.currentIndex = -1; return; } } } loadAndPlayCurrentSong(); };
    const playPrev = () => { if (playbackState.queue.length === 0) return; if (audioPlayer.currentTime > 3) audioPlayer.currentTime = 0; else { playbackState.currentIndex--; if (playbackState.currentIndex < 0) playbackState.currentIndex = playbackState.queue.length - 1; loadAndPlayCurrentSong(); } };
    const handleCardClick = (e, song, songsInView) => { const card = e.currentTarget; if (e.ctrlKey || e.metaKey) card.classList.toggle('selected'); else { $$('.song-card.selected, .song-row.selected').forEach(c => c.classList.remove('selected')); setQueueAndPlay(songsInView, song); } };
    const showContextMenu = (e, song) => { e.preventDefault(); contextMenu.style.display = 'block'; contextMenu.style.left = `${e.pageX}px`; contextMenu.style.top = `${e.pageY}px`; let menuItems = `<ul><li data-action="play">Play Next</li><li data-action="queue">Add to Queue</li>`; if (currentView.type === 'playlist' && currentView.name !== 'Liked Songs') menuItems += `<li data-action="remove-from-playlist">Remove from Playlist</li>`; menuItems += `<hr><li data-action="delete" class="delete">Delete from Library</li></ul>`; const hideMenu = () => { contextMenu.style.display = 'none'; document.removeEventListener('click', hideMenu); }; contextMenu.innerHTML = menuItems; setTimeout(() => document.addEventListener('click', hideMenu), 0); };
    player.playPauseBtns.forEach(btn => btn.addEventListener('click', () => audioPlayer.src ? (audioPlayer.paused ? audioPlayer.play() : audioPlayer.pause()) : null));
    player.nextBtns.forEach(btn => btn.addEventListener('click', playNext));
    player.prevBtns.forEach(btn => btn.addEventListener('click', playPrev));
    player.shuffleBtns.forEach(btn => btn.addEventListener('click', () => { playbackState.isShuffle = !playbackState.isShuffle; player.shuffleBtns.forEach(b => b.classList.toggle('active', playbackState.isShuffle)); showToast(`Shuffle ${playbackState.isShuffle ? 'On' : 'Off'}`); }));
    player.repeatBtns.forEach(btn => btn.addEventListener('click', () => { const modes = ['none', 'all', 'one']; playbackState.repeatMode = modes[(modes.indexOf(playbackState.repeatMode) + 1) % modes.length]; player.repeatBtns.forEach(b => { b.classList.toggle('active', playbackState.repeatMode !== 'none'); const oneIcon = b.querySelector('.repeat-one-icon'); if (oneIcon) oneIcon.style.display = playbackState.repeatMode === 'one' ? 'block' : 'none'; }); showToast(`Repeat: ${playbackState.repeatMode.charAt(0).toUpperCase() + playbackState.repeatMode.slice(1)}`); }));
    audioPlayer.addEventListener('play', () => player.playPauseBtns.forEach(b => b.className = 'pause-btn main-control'));
    audioPlayer.addEventListener('pause', () => player.playPauseBtns.forEach(b => b.className = 'play-btn main-control'));
    audioPlayer.addEventListener('ended', () => { if (playbackState.repeatMode === 'one' && audioPlayer.src) { audioPlayer.currentTime = 0; audioPlayer.play(); } else { playNext(); } });
    audioPlayer.addEventListener('loadedmetadata', () => player.totalTimes.forEach(el => el.textContent = formatTime(audioPlayer.duration)));
    audioPlayer.addEventListener('timeupdate', () => { const progress = (audioPlayer.currentTime / audioPlayer.duration) * 100; player.progressBarFills.forEach(el => el.style.width = `${progress || 0}%`); player.currentTimes.forEach(el => el.textContent = formatTime(audioPlayer.currentTime)); });
    player.progressContainers.forEach(pc => pc.addEventListener('click', e => { if (audioPlayer.duration) audioPlayer.currentTime = (e.offsetX / pc.clientWidth) * audioPlayer.duration; }));
    likeBtnPlayer.addEventListener('click', async (e) => { e.stopPropagation(); const song = playbackState.queue[playbackState.currentIndex]; if (!song) return; const res = await api.post('/api/like-song', { songFilename: song.filename }); song.liked = res.liked; updateLikeButtonState(res.liked); showToast(res.liked ? 'Added to Liked Songs' : 'Removed from Liked Songs'); const librarySong = library.find(s => s.filename === song.filename); if (librarySong) librarySong.liked = res.liked; if (currentView.name === "Liked Songs") renderMainView(); });
    const updateLikeButtonState = (isLiked) => { likeBtnPlayer.classList.toggle('liked', isLiked); const icon = isLiked ? `<svg role="img" height="20" width="20" viewBox="0 0 24 24"><path fill="white" d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"></path></svg>` : `<svg role="img" height="20" width="20" viewBox="0 0 24 24"><path fill="white" d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"></path></svg>`; likeBtnPlayer.innerHTML = icon; }; updateLikeButtonState(false);
    const openFsPlayer = () => { if (audioPlayer.src) { fsPlayer.container.classList.add('visible'); appContainer.classList.add('fs-active'); } }; const closeFsPlayer = () => { fsPlayer.container.classList.remove('visible'); appContainer.classList.remove('fs-active'); setTimeout(() => { fsPlayer.container.style.transform = ''; fsPlayer.container.style.opacity = ''; }, 300); };
    currentTrack.clickable.addEventListener('click', openFsPlayer); document.addEventListener('keydown', (e) => { if (e.key === "Escape" && fsPlayer.container.classList.contains('visible')) closeFsPlayer(); });
    let touchStartY = 0, touchMoveY = 0; fsPlayer.container.addEventListener('touchstart', (e) => { touchStartY = e.touches[0].clientY; fsPlayer.container.style.transition = 'none'; }, { passive: true }); fsPlayer.container.addEventListener('touchmove', (e) => { touchMoveY = e.touches[0].clientY; const swipeDistance = touchMoveY - touchStartY; if (swipeDistance > 0) { fsPlayer.container.style.transform = `translateY(${swipeDistance}px)`; const opacity = Math.max(1 - (swipeDistance / window.innerHeight) * 1.5, 0.5); fsPlayer.container.style.opacity = opacity; } }, { passive: true }); fsPlayer.container.addEventListener('touchend', () => { const swipeDistance = touchMoveY - touchStartY; fsPlayer.container.style.transition = 'opacity .3s ease, transform .3s ease'; if (swipeDistance > 100) closeFsPlayer(); else { fsPlayer.container.style.transform = 'translateY(0)'; fsPlayer.container.style.opacity = '1'; } touchStartY = 0; touchMoveY = 0; });
    const formatTime = s => s && !isNaN(s) ? `${Math.floor(s / 60)}:${Math.floor(s % 60).toString().padStart(2, '0')}` : '0:00'; const showToast = (m, t = 'success') => { const e = document.createElement('div'); e.className = `toast ${t}`, e.textContent = m, $('#toast-container').appendChild(e), setTimeout(() => e.remove(), 3e3) }; const switchView = (v) => { $$('.view').forEach(e => e.classList.remove('active')), $(`#${v}`).classList.add('active'), render() }; const updateActiveNav = () => { $$('.nav-links li, #playlist-list li').forEach(e => e.classList.remove('active')); const t = { library: '#nav-library', upload: '#nav-upload', playlist: `li[data-playlist-name="${currentView.name}"]` }[currentView.type]; $(t)?.classList.add('active') };
    // --- NEW: EVENT LISTENER FOR SEARCH INPUT ---
    searchInput.addEventListener('input', renderMainView);
    createPlaylistBtn.addEventListener('click', async () => { const e = newPlaylistInput.value.trim(); if (!e) return; await api.post('/api/playlists', { name: e }), newPlaylistInput.value = '', await fetchData(), renderPlaylists(), showToast(`Playlist '${e}' created`) });
    $('#nav-library').addEventListener('click', () => { searchInput.value = ''; currentView = { type: 'library', name: 'Library' }; switchView('library-view'); hideSidebar() });
    $('#nav-upload').addEventListener('click', () => { currentView = { type: 'upload', name: 'Upload Music' }, switchView('upload-view'); hideSidebar() });
    const handleUploadFiles = (e) => { const uploadPreview = $('#upload-preview'), uploadPreviewWrapper = $('#upload-preview-wrapper'); uploadPreview.innerHTML = ''; if (0 === e.length) { uploadPreviewWrapper.style.display = 'none'; return } uploadPreviewWrapper.style.display = 'block'; Array.from(e).forEach(e => { const t = document.createElement('li'); t.textContent = e.name, uploadPreview.appendChild(t) }) };
    $('#file-input').addEventListener('change', e => handleUploadFiles(e.target.files));
    uploadForm.addEventListener('submit', async e => { e.preventDefault(); const t = $('#file-input'); if (0 === t.files.length) return; const a = new FormData; for (const e of t.files) a.append('musicFiles', e); const s = $('#upload-status'); s.textContent = `Uploading...`; const i = await (await fetch('/api/upload', { method: 'POST', body: a })).json(); s.textContent = i.message, showToast(i.message), await fetchData(), 'library' === currentView.type && renderMainView(), t.value = '', $('#upload-preview').innerHTML = '', $('#upload-preview-wrapper').style.display = 'none' });
    const handleDragStart = (e) => { const t = e.currentTarget; if (!t.classList.contains('selected')) { $$('.song-card.selected, .song-row.selected').forEach(e => e.classList.remove('selected')); t.classList.add('selected'); } const a = Array.from($$('.song-card.selected, .song-row.selected')).map(e => e.dataset.filename); e.dataTransfer.setData('application/json', JSON.stringify(a)); const s = document.createElement("div"), i = library.find(e => e.filename === a[0]); s.className = 'drag-image'; s.innerHTML = `<img src="${i.coverArtUrl}"><div class="drag-info"><span class="drag-title">${i.title}</span>${a.length > 1 ? `<span class="drag-count">${a.length} songs</span>` : `<span class="drag-count">${i.artist}</span>`}</div>`; document.body.appendChild(s); e.dataTransfer.setDragImage(s, 25, 25); setTimeout(() => document.body.removeChild(s), 0) };
    const handleDropOnPlaylist = async e => { e.preventDefault(); const t = e.currentTarget.dataset.playlistName; e.currentTarget.classList.remove('drop-target'); const a = JSON.parse(e.dataTransfer.getData('application/json')); await api.post(`/api/playlists/${t}/add-multiple`, { songFilenames: a }); showToast(`${a.length} song(s) added to ${t}`); $$('.song-card.selected, .song-row.selected').forEach(e => e.classList.remove('selected')); await fetchData(); currentView.type === 'playlist' && currentView.name === t && renderMainView() };
    const hideSidebar = () => { sidebar.classList.remove('visible'); sidebarOverlay.classList.remove('visible'); };
    hamburgerBtn.addEventListener('click', (e) => { e.stopPropagation(); sidebar.classList.add('visible'); sidebarOverlay.classList.add('visible'); });
    sidebarOverlay.addEventListener('click', hideSidebar);
    const initSVGs = () => { const switcherHTML = `<button class="view-btn list-view-btn"><svg viewBox="0 0 24 24"><path fill="white" d="M3 13h18v-2H3v2zm0 4h18v-2H3v2zm0-8h18V7H3v2z"></path></svg></button><button class="view-btn grid-view-btn"><svg viewBox="0 0 24 24"><path fill="white" d="M4 4h7v7H4V4zm0 9h7v7H4v-7zM13 4h7v7h-7V4zm0 9h7v7h-7v-7z"></path></svg></button>`; desktopViewSwitcher.innerHTML = switcherHTML; mobileViewSwitcher.innerHTML = switcherHTML; $$('#shuffle-btn').forEach(b => b.innerHTML = `<svg role="img" height="20" width="20" viewBox="0 0 24 24"><path fill="white" d="M10.59 9.17L5.41 4 4 5.41l5.17 5.17 1.42-1.41zM14.5 4l2.04 2.04L4 18.59 5.41 20 17.96 7.46 20 9.5V4h-5.5zm.33 9.41l-1.41 1.41 3.13 3.13L14.5 20H20v-5.5l-2.04 2.04-3.13-3.13z"></path></svg>`); $$('#prev-btn').forEach(b => b.innerHTML = `<svg role="img" height="20" width="20" viewBox="0 0 24 24"><path fill="white" d="M6 6h2v12H6zm3.5 6l8.5 6V6z"></path></svg>`); $$('#next-btn').forEach(b => b.innerHTML = `<svg role="img" height="20" width="20" viewBox="0 0 24 24"><path fill="white" d="M8 5v14l11-7zM18 6h2v12h-2z"></path></svg>`); $$('#repeat-btn').forEach(b => b.innerHTML = `<svg role="img" height="20" width="20" viewBox="0 0 24 24"><path fill="white" d="M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z"></path></svg><span class="repeat-one-icon" style="position:absolute; top: 0; right: 0; font-size: 10px; background: var(--accent); color: #000; border-radius: 50%; width: 12px; height: 12px; text-align: center; line-height: 12px; font-weight: bold; display: none;">1</span>`); };
    const switchLayout = (layout) => { currentLayout = layout; localStorage.setItem('music-app-layout', layout); $$('.grid-view-btn').forEach(b => b.classList.toggle('active', layout === 'grid')); $$('.list-view-btn').forEach(b => b.classList.toggle('active', layout === 'list')); renderMainView(); };
    (async () => { await fetchData(); initSVGs(); $$('.grid-view-btn').forEach(b => b.addEventListener('click', () => switchLayout('grid'))); $$('.list-view-btn').forEach(b => b.addEventListener('click', () => switchLayout('list'))); switchLayout(currentLayout); render(); })();
});
EOF

# --- 11. ADD DEFAULT COVER ART SVG ---
cat <<'EOF' > "$PROJECT_DIR/app/public/covers/default.svg"
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#555"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 14.5c-2.49 0-4.5-2.01-4.5-4.5S9.51 7.5 12 7.5s4.5 2.01 4.5 4.5-2.01 4.5-4.5 4.5zm0-8C9.98 8.5 8.5 9.98 8.5 12s1.48 3.5 3.5 3.5 3.5-1.48 3.5-3.5-1.48-3.5-3.5-3.5z"/></svg>
EOF

# --- 12. LAUNCH THE APPLICATION ---
echo "Setup complete. Navigating to project directory..."
cd "$PROJECT_DIR"
echo "Building and starting your music app (v7.2.0)..."
docker-compose up -d --build

# --- 13. PROVIDE ACCESS INFORMATION ---
echo ""
echo "--------------------------------------------------------"
SERVER_IP=$(hostname -I | awk '{print $1}')
echo "SUCCESS! Your music app v7.2.0 is now running."
echo "Featuring a new universal search bar!"
echo "Access it in your browser at: http://${SERVER_IP}:${HOST_PORT}"
echo "--------------------------------------------------------"